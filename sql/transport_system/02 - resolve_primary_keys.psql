set session schema 'clearing_house_commit';

/*****************************************************************************************************************************************
** Function get_next_id
** Returns
******************************************************************************************************************************************/
-- select get_next_id('public', 'public.tbl_sites', 'site_id')
-- drop function if exists get_next_id(character varying, character varying, character varying)
create or replace function clearing_house_commit.get_next_id(p_schema_name character varying, p_table_name character varying, p_column_name character varying)
    returns int as $$
declare
    v_next_id       int = 0;
    v_sequence_name character varying;
begin
    if p_table_name not like format('%s.%%', p_schema_name) then
        p_table_name = format('%s.%s', p_schema_name, p_table_name);
    end if;
    v_sequence_name = pg_get_serial_sequence(p_table_name, p_column_name);
    v_next_id       = nextval(v_sequence_name);
    return v_next_id;
end $$ language plpgsql;

create or replace function clearing_house_commit.reset_serial_id(
    p_schema_name character varying,
    p_table_name character varying,
    p_column_name character varying
) returns void as $$
declare
    v_sql text = '';
    v_next_id integer;
    v_seq_id character varying;
begin
    v_sql = format('select max(%s) from %s.%s', p_column_name, p_schema_name, p_table_name);
    execute v_sql into v_next_id;
    v_next_id = coalesce(v_next_id, 1);
    v_seq_id = pg_get_serial_sequence(format('%s.%s', p_schema_name, p_table_name), p_column_name);
    perform setval(v_seq_id, v_next_id);
end $$ language plpgsql;

/*****************************************************************************************************************************************
** Function resolve_primary_key
** Returns
******************************************************************************************************************************************/
--drop function clearing_house_commit.resolve_primary_key(p_submission_id int, p_schema_name character varying, p_table_name character varying, p_primary_key character varying)
create or replace function clearing_house_commit.resolve_primary_key(
    p_submission_id int,
    p_schema_name character varying,
    p_table_name character varying,
    p_primary_key character varying
)
    returns text as $$
declare
    v_sql text = '';
begin
    begin
        perform clearing_house_commit.reset_serial_id(p_schema_name, p_table_name, p_primary_key);
        v_sql = format('update clearing_house.%s
                set transport_id = case when public_db_id is null then clearing_house_commit.get_next_id(''%s'', ''%s'', ''%s'') else public_db_id end,
                    transport_date = now(),
                    transport_type = case when public_db_id is null then ''C'' else ''U'' end
            where submission_id = %s
              and transport_id is null;', p_table_name, p_schema_name, p_table_name, p_primary_key, p_submission_id);
        --raise notice '%', v_sql;
        return v_sql;
    exception
        when sqlstate 'GUARD' then
            raise notice '%', 'GUARDED';
    end;
end;$$ language plpgsql;

create or replace function clearing_house_commit.resolve_primary_keys(
    p_submission_id int,
    p_schema_name character varying,
    p_dry_run boolean
)
    returns setof text as $$
declare v_schema_name character varying;
	    v_table_name character varying;
	    v_entity_name character varying;
        v_pk_name character varying;
        v_sql text = '';
begin
    begin

        perform clearing_house_commit.generate_sead_tables();

        for v_schema_name, v_table_name, v_pk_name, v_entity_name in (
            select 'public', table_name, pk_name, entity_name
            from clearing_house_commit.tbl_sead_tables
            order by 2, 3
        )
        loop
            v_sql = clearing_house_commit.resolve_primary_key(p_submission_id, p_schema_name, v_table_name, v_pk_name);
            if (not p_dry_run) then
                 execute v_sql;
            end if;
            return next v_sql;
        end loop;
    exception
        when sqlstate 'GUARD' then
            raise notice '%', 'GUARDED';
    end;
end;$$ language plpgsql;


