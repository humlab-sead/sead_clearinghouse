<?php
namespace Repository;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-03-12 at 09:10:38.
 */
class ActivityRepositoryTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var ActivityRepository
     */
    protected $registry;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->registry = new RepositoryRegistry();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    protected function createNew($use_case_id, $user_id, $session_id, $status_id)
    {
        return array(
            "activity_log_id" => 0,
            "use_case_id" => $use_case_id,
            "user_id" => $user_id,
            "entity_type_id" => 0,
            "entity_id" => 0,
            "session_id" => $session_id,
            "execute_start_time" => date("Y-m-d H:i:s"), //new \DateTime(),
            "execute_stop_time" => null,
            "status_id" => $status_id,
            "activity_data" => 0,
            "message" => ""
        );
    }
    /**
     * @covers Repository\ActivityRepository::findByEntityId
     * @todo   Implement testFindByEntityId().
     */
    public function testCanStoreAndFetchActivity()
    {
        $use_case_id = 9;
        $user_id = 1;
        $session_id = 99;
        $status_id = 2;
        
        $activity = $this->createNew($use_case_id, $user_id, $session_id, $status_id);
        $activity["message"] = "Test case run: testCanStoreAndFetchActivity";
        
        $this->registry->getActivityRepository()->save($activity);
        
        $this->assertTrue($activity["activity_log_id"] > 0);
        
        $activity2 = $this->registry->getActivityRepository()->findById($activity["activity_log_id"]);
        
        $this->assertEquals($activity["use_case_id"], $activity2["use_case_id"]);
        $this->assertEquals($activity["user_id"], $activity2["user_id"]);
        $this->assertEquals($activity["session_id"], $activity2["session_id"]);
        $this->assertEquals($activity["status_id"], $activity2["status_id"]);
        $this->assertEquals($activity["message"], $activity2["message"]);
                
                
    }

}
