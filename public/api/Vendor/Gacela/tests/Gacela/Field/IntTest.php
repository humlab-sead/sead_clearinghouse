<?php
namespace Gacela\Field;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-09-26 at 05:16:46.
 */
class IntTest extends \PHPUnit_Framework_TestCase
{
	protected $meta = null;

	protected function setUp()
	{
		$this->object = new Int;

		$this->meta = (object) array(
			'min' => 1,
			'max' => 5,
			'type' => 'int',
			'length' => 3,
			'sequenced' => false,
			'null' => false
		);
	}

	public function providerBoundsCode()
	{
		return array(
			array(0),
			array(6)
		);
	}

	public function providerPass()
	{
		return array(
			array(0x3),
			array(2),
			array(4)
		);
	}

	public function providerTransform()
	{
		return array(
			array(0xF, 15),
			array(24, 24),
			array("25", 25),
			array("26.3", 26),
			array(27.5, 27),
			array(null, null),
			array(false, null),
			array('', null),
			array("", null)
		);
	}

	public function providerTypeCode()
	{
		return array(
			array('hello'),
			array("23"),
			array(23.5),
			array('0xFF'),
			array(array(5)),
			array(array("5"))
		);
	}

	/**
	 * @dataProvider providerBoundsCode
	 */
	public function testValidateBoundsCode($val)
	{
		$this->assertEquals(Int::BOUNDS_CODE, $this->object->validate($this->meta,$val));
	}

	public function testValidateNullCode()
	{
		$this->assertEquals(Int::NULL_CODE, $this->object->validate($this->meta,null));
	}

	public function testValidateLengthCode()
	{
		$this->assertEquals(Int::LENGTH_CODE, $this->object->validate($this->meta, 1234));
	}

	/**
	 * @param $value
	 * @dataProvider providerTypeCode
	 */
	public function testValidateTypeCode($value)
	{
		$this->assertEquals(Int::TYPE_CODE, $this->object->validate($this->meta, $value));
	}

    /**
     * @covers Gacela\Field\Int::validate
     * @dataProvider providerPass
     */
    public function testValidatePassInts($value)
    {
		$this->assertTrue($this->object->validate($this->meta, $value));
    }

	public function testValidatePassNull()
	{
		$this->meta->null = true;

		$this->assertTrue($this->object->validate($this->meta, null));
	}

	public function testValidatePassSequenced()
	{
		$this->meta->sequenced = true;
		$this->meta->null = false;

		$this->assertTrue($this->object->validate($this->meta, null));
	}

    /**
     * @covers Gacela\Field\Int::transform
     * @dataProvider providerTransform
     */
    public function testTransform($provided, $expected)
    {
		$this->assertSame($expected, $this->object->transform($this->meta, $provided));
    }
}
