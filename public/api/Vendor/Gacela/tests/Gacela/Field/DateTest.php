<?php
namespace Gacela\Field;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-09-30 at 06:30:18.
 */
class DateTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var \stdClass
     */
    protected $meta;

	protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
		$this->object = new Date;

        $this->meta = (object) array(
			'type' => 'date',
			'null' => false,
			'default' => 'current'
		);
    }

	public function providerPass()
	{
		return array(
			array(strtotime('Jan 1, 101')),
			array(strtotime('12/31/2999')),
			array(time()),
			array(strtotime('Feb 29, 2033'))
		);
	}

	public function providerTransformIn()
	{
		$now = time();
		$yesterday = strtotime('-1 day');
		$past = strtotime('-500 years');
		$future = strtotime('+500 years');

		return array(
			array(date('c', $now), $now),
			array(date('c', $yesterday), $yesterday),
			array(date('c', $past), $past),
			array(date('c', $future), $future),
			array('Random String', 'Random String')
		);
	}

	public function providerTransformOut()
	{
		$now = time();
		$yesterday = strtotime('-1 day');
		$past = strtotime('-500 years');
		$future = strtotime('+500 years');

		return array(
			array($now, date('c', $now)),
			array($yesterday, $yesterday),
			array($past, $past),
			array($future, date('c', $future)),
			array(null, 'Random String')
		);
	}

    /**
     * @covers Gacela\Field\Date::validate
	 * @dataProvider providerPass
     */
    public function testValidatePass($time)
    {
        $this->assertTrue($this->object->validate($this->meta, $time));
    }

	/**
	 * @covers Gacela\Field\Date::validate
	 */
	public function testValidatePassNull()
	{
		$this->meta->null = true;

		$this->assertTrue($this->object->validate($this->meta, null));
	}

	public function testValidateNullCode()
	{
		$this->assertEquals(Date::NULL_CODE, $this->object->validate($this->meta, null));
	}

	public function testValidateTypeCode()
	{
		$this->assertEquals(Date::TYPE_CODE, $this->object->validate($this->meta, date('c')));
	}

	/**
     * @covers Gacela\Field\Date::transform
	 * @dataProvider providerTransformIn
     */
    public function testTransformIn($expected, $val)
    {
        $this->assertSame($expected, $this->object->transform($this->meta, $val, true));
    }

	/**
	 * @param $expected
	 * @param $val
	 * @dataProvider providerTransformOut
	 */
	public function testTransformOut($expected, $val)
	{
		$this->assertSame($expected, $this->object->transform($this->meta, $val, false));
	}
}
