<?php
namespace Gacela\Collection;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-10-23 at 08:26:51.
 */
class ArrTest extends \Test\GUnit\TestCase
{
    /**
     * @var Arr
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
		$arr = array(
			array('1', 'Gryffindor'),
			array('2', 'Hufflepuff'),
			array('3', 'Ravenclaw'),
			array('4', 'Slytherin')
		);

		foreach($arr as $k => $v) {
			$arr[$k] = (object) array('houseId' => (int) $v[0], 'houseName' => $v[1]);
		}

        $this->object = new Arr(\Gacela::instance()->loadMapper('house'), $arr);
    }

	/**
	 * @covers \Gacela\Collection\Collection::__construct
	 */
	public function test__construct()
	{
		$this->assertAttributeInstanceOf('\App\Mapper\House', '_mapper', $this->object);

		$this->assertAttributeInternalType('array', '_data', $this->object);
	}

	public function testAsArrayOneField()
	{
		$arr = $this->object->asArray('houseId');

		$this->assertSame(array(1,2,3,4), $arr);
	}

	public function testAsArrayMultipleFields()
	{
		$arr = $this->object->asArray('houseId', 'houseName');

		$arr2 = array(
			array('houseId' => 1, 'houseName' => 'Gryffindor'),
			array('houseId' => 2, 'houseName' => 'Hufflepuff'),
			array('houseId' => 3, 'houseName' => 'Ravenclaw'),
			array('houseId' => 4, 'houseName' => 'Slytherin')
		);

		$this->assertSame($arr2, $arr);
	}

    /**
     * @covers Gacela\Collection\Arr::count
     */
    public function testCount()
    {
		$this->assertSame(4, count($this->object));
    }

    /**
     * @covers Gacela\Collection\Arr::current
     */
    public function testCurrentInstance()
    {
		$current = $this->object->current();

		$this->assertInstanceOf('App\Model\House', $current);
		$this->assertEquals(1, $current->houseId);


    }

	public function testCurrentIsFirstElementInArray()
	{
		$current = $this->object->current();
		$this->assertEquals(1, $current->houseId);
	}

	public function testCurrentNotAdvancesPointer()
	{
		$current = $this->object->current();
		$this->assertEquals($current, $this->object->current());
	}

	public function testCurrentFindByPrimaryKey()
	{
		$data = array(
			(object) array('houseId' => 1),
			(object) array('houseId' => 2)
		);

		$arr = new Arr(\Gacela::instance()->loadMapper('house'), $data);

		$this->assertSame('Gryffindor', $arr->current()->houseName);
	}

	public function testCurrentLoad()
	{
		$arr = array(
			array(10, 'Potter'),
			array(11, 'Granger'),
			array(12, 'Weasley'),
			array(13, 'Malfoy')
		);

		foreach($arr as $k => $v) {
			$arr[$k] = (object) array('houseId' => (int) $v[0], 'houseName' => $v[1]);
		}

		$collection = new Arr(\Gacela::instance()->loadMapper('house'), $arr);

		$current = $collection->current();

		$this->assertSame(10, $current->houseId);
		$this->assertSame('Potter', $current->houseName);

		foreach($collection as $k => $m) {
			$this->assertSame($arr[$k]->houseId, $m->houseId);
			$this->assertSame($arr[$k]->houseName, $m->houseName);
		}
	}

	public function testCurrentInvalidIndexReturnsEmptyInstance()
	{
		$this->object = new Arr(\Gacela::instance()->loadMapper('house'), array());

		$this->assertSame(null, $this->object->current()->houseId);
	}

    /**
     * @covers Gacela\Collection\Arr::key
     */
    public function testKey()
    {
        $this->assertSame(0, $this->object->key());

		foreach($this->object as $obj) {}

		$this->assertSame(4, $this->object->key());
    }

	/**
	 * @covers Gacela\Collection\Arr::next
	 */
	public function testNext()
	{
		$this->object->next();

		$this->assertSame(1, $this->object->key());
		$this->assertEquals('Hufflepuff', $this->object->current()->houseName);
	}

    /**
     * @covers Gacela\Collection\Arr::rewind
     */
    public function testRewind()
    {
		$this->assertSame(1, $this->object->current()->houseId);
		$this->assertSame(0, $this->object->key());

		foreach($this->object as $obj) {}

		$this->assertNull($this->object->current()->houseId);
		$this->assertSame(4, $this->object->key());

		$this->object->rewind();

		$this->assertSame(1, $this->object->current()->houseId);
		$this->assertSame(0, $this->object->key());
    }

    /**
     * @covers Gacela\Collection\Arr::search
     * @todo   Implement testSearch().
     */
    public function testSearch()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

	/**
	 * @covers Gacela\Collection\Arr::seek
	 */
	public function testSeek()
	{
		$this->object->seek(2);

		$this->assertSame('Ravenclaw', $this->object->current()->houseName);
		$this->assertSame(2, $this->object->key());
	}

	/**
	 * @expectedException \OutOfBoundsException
	 */
	public function testSeekOutOfBoundsException()
	{
		$this->object->seek(5);
	}

    /**
     * @covers Gacela\Collection\Arr::slice
     * @todo   Implement testSlice().
     */
    public function testSlice()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Gacela\Collection\Arr::valid
     */
    public function testValid()
    {
        foreach($this->object as $obj) {
			if($this->object->key() < 4) {
				$this->assertTrue($this->object->valid());
			} else {
				$this->assertFalse($this->object->valid());
			}
		}
    }

	public function testEmptyCollection()
	{
		$data = array();

		$collection = new Arr(\Gacela::instance()->loadMapper('test'), $data);

		foreach($collection as $row)
		{
			$this->fail('Empty Collection should not iterate');
		}
	}
}
