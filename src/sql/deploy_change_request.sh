#!/bin/bash

SHELL=/bin/bash

set -e

g_script_name=`basename "$0"`
g_target_folder=
g_force=NO
g_add_change_request=NO
g_add_to_git_clone=NO
g_sead_ccs_folder=
g_sqitch_command=./docker-sqitch.sh
g_target_project=subsystem
g_on_schema_exists=drop
g_author="Roger MÃ¤hler"
g_crid=

g_real_path=$(readlink -f "${BASH_SOURCE[0]}")
g_scripts_folder=$(dirname "$g_real_path")

function usage() {
    if [ "$1" != "" ]; then
        echo "error: $1"
    fi
    echo "usage: $g_script_name [--force] [--target-folder FOLDER] [--change CR-NAME] [--add-change-request [--sead-ccs-folder PATH|--add-to-git-clone]] "
    echo "       advanced option: [--target-folder=dir]"
    echo ""
    echo "       --force                  Force overwrite of existing target folder if exists"
    echo "       --target-folder FOLDER   Override default target dir (not recommended)"
    echo "       --change                 Override default change request name"
    echo "       --add-change-request     Add script to SEAD Control System"
    echo "       --sead-ccs-folder=path   Path to SEAD Control System"
    echo "       --add-to-git-clone       Deploy target (as defined in sqitch.conf"
    exit 64
}


POSITIONAL=()
while [[ $# -gt 0 ]]
do
    key="$1"
    case $key in
        --target-folder|-o)
            g_target_folder="$2"; shift 2;;
        --force)
            g_force="YES"; shift ;;
        --on-schema-exists)
            g_on_schema_exists="$2"; shift 2;;
        --add-change-request)
            g_add_change_request="YES"; shift ;;
        --add-to-git-clone)
            g_add_to_git_clone="YES"; shift ;;
        --sead-ccs-folder)
            g_sead_ccs_folder="$2"; shift 2;;
        --change)
            g_crid="$2"; shift 2;;
        --help)
            usage ;
            exit 0 ;;
       *)
        usage "error: unknown option $key";
       ;;
    esac
done

if [ "$g_add_to_git_clone" == "YES" ]; then
    g_sead_ccs_folder=`pwd`/sead_change_control
fi

function get_cr_id() {
    day=$(date +%Y%m%d)
    cr_x="${day}_DDL_CLEARINGHOUSE_SYSTEM"
    echo "${cr_x^^}"
}

if [ "$g_crid" == "" ]; then
    g_crid=`get_cr_id`
fi

if [ "$g_target_folder" == "" ]; then
    g_target_folder="./tmp"
fi

function generate_change_request() {

    if [ -f "$g_target_folder/${g_crid}.sql" ]; then
        if [ "$g_force" == "YES" ]; then
            echo "notice: removing existing file $g_target_folder/${g_crid}.sql"
            rm -f "$g_target_folder/${g_crid}.sql"
        else
            echo "error: target file $g_target_folder/${g_crid}.sql already exists"
            exit 64
        fi
    fi
    mkdir -p $g_target_folder

    echo "-- Deploy subsystem: $g_crid"                                                      > $g_target_folder/${g_crid}.sql
    echo ""                                                                                 >> $g_target_folder/${g_crid}.sql
    echo "-- NOTE DO NOT CHANGE THIS FILE!"                                                 >> $g_target_folder/${g_crid}.sql
    echo ""                                                                                 >> $g_target_folder/${g_crid}.sql
    echo "-- THIS FILE IS AUTOMATICALLY GENERATED BY SEAD CLEARINGHOUDE SYSTEM"             >> $g_target_folder/${g_crid}.sql
    echo ""                                                                                 >> $g_target_folder/${g_crid}.sql
    echo "/***************************************************************************"     >> $g_target_folder/${g_crid}.sql
    echo "Author         $g_author"                                                         >> $g_target_folder/${g_crid}.sql

    echo "Date           $day"                                                              >> $g_target_folder/${g_crid}.sql
    echo "Description    Deploy of Clearinghouse Transport System."                         >> $g_target_folder/${g_crid}.sql
    echo "Issue          https://github.com/humlab-sead/sead_change_control/issues/215"     >> $g_target_folder/${g_crid}.sql
    echo "Prerequisites  "                                                                  >> $g_target_folder/${g_crid}.sql
    echo "Reviewer"                                                                         >> $g_target_folder/${g_crid}.sql
    echo "Approver"                                                                         >> $g_target_folder/${g_crid}.sql
    echo "Idempotent     YES"                                                               >> $g_target_folder/${g_crid}.sql
    echo "Notes          Use --single-transactin on execute!"                               >> $g_target_folder/${g_crid}.sql
    echo "***************************************************************************/"     >> $g_target_folder/${g_crid}.sql
    echo ""                                                                                 >> $g_target_folder/${g_crid}.sql
    echo "set client_encoding = 'UTF8';"                                                    >> $g_target_folder/${g_crid}.sql
    echo "set standard_conforming_strings = on;"                                            >> $g_target_folder/${g_crid}.sql
    echo "set client_min_messages to warning;"                                              >> $g_target_folder/${g_crid}.sql

    if [ "$g_on_schema_exists" == "drop" ]; then
        echo ""                                                                             >> $g_target_folder/${g_crid}.sql
        echo "drop schema if exists clearing_house cascade;"                                >> $g_target_folder/${g_crid}.sql
    fi

    echo ""                                                                                 >> $g_target_folder/${g_crid}.sql
    echo "create schema if not exists clearing_house authorization clearinghouse_worker;"   >> $g_target_folder/${g_crid}.sql
    echo ""                                                                                 >> $g_target_folder/${g_crid}.sql

    echo "-- 00_assign_privileges.sql"                                                      >> $g_target_folder/${g_crid}.sql
    cat $g_scripts_folder/00_assign_privileges.sql                                          >> $g_target_folder/${g_crid}.sql
    echo ""                                                                                 >> $g_target_folder/${g_crid}.sql

    echo "set role clearinghouse_worker;"                                                   >> $g_target_folder/${g_crid}.sql
    echo ""                                                                                 >> $g_target_folder/${g_crid}.sql
    echo "\set autocommit off;"                                                             >> $g_target_folder/${g_crid}.sql
    echo ""                                                                                 >> $g_target_folder/${g_crid}.sql
    echo "\cd /repo/subsystem/deploy"                                                       >> $g_target_folder/${g_crid}.sql
    echo ""                                                                                 >> $g_target_folder/${g_crid}.sql
    echo "begin;"                                                                           >> $g_target_folder/${g_crid}.sql
    echo ""                                                                                 >> $g_target_folder/${g_crid}.sql

    for file in $(ls $g_scripts_folder/0[1,2,3,4]*.sql); do
        echo "-- $file"                                                                     >> $g_target_folder/${g_crid}.sql
        cat $file                                                                           >> $g_target_folder/${g_crid}.sql
        echo ""                                                                             >> $g_target_folder/${g_crid}.sql
    done

    echo "call clearing_house.create_clearinghouse_model(false);"                           >> $g_target_folder/${g_crid}.sql
    echo "call clearing_house.populate_clearinghouse_model();"                              >> $g_target_folder/${g_crid}.sql
    echo "call clearing_house.create_public_model(false, false);"                           >> $g_target_folder/${g_crid}.sql

    for file in $(ls $g_scripts_folder/05*.sql); do
        echo ""                                                                             >> $g_target_folder/${g_crid}.sql
        echo "-- $file"                                                                     >> $g_target_folder/${g_crid}.sql
        cat $file                                                                           >> $g_target_folder/${g_crid}.sql
        echo ""                                                                             >> $g_target_folder/${g_crid}.sql
    done

    for file in $(ls $g_scripts_folder/review/*.sql); do
        echo ""                                                                             >> $g_target_folder/${g_crid}.sql
        echo "-- $file"                                                                     >> $g_target_folder/${g_crid}.sql
        cat $file                                                                           >> $g_target_folder/${g_crid}.sql
        echo ""                                                                             >> $g_target_folder/${g_crid}.sql
    done

    for file in $(ls $g_scripts_folder/reporting/*.sql); do
        echo ""                                                                             >> $g_target_folder/${g_crid}.sql
        echo "-- $file"                                                                     >> $g_target_folder/${g_crid}.sql
        cat $file                                                                           >> $g_target_folder/${g_crid}.sql
        echo ""                                                                             >> $g_target_folder/${g_crid}.sql
    done

	echo "commit;"                                                                          >> $g_target_folder/${g_crid}.sql
    echo ""                                                                                 >> $g_target_folder/${g_crid}.sql
	echo "reset role;"                                                                      >> $g_target_folder/${g_crid}.sql

    echo "notice: change request has been generated to $g_target_folder"
}

function add_change_request_to_change_control_system()
{
    echo "notice: adding change request to ${g_sead_ccs_folder}..."
    g_crid=`get_cr_id`

    if [ ! -f $g_target_folder/${g_crid}.sql ]; then
        echo "failure: cannot add change request since $g_target_folder/${g_crid}.sql is missing"
        exit 64
    fi

    if [ "$g_add_to_git_clone" == "YES" ]; then
        echo "warning: cloning temporary git repo"
        rm -rf ./sead_change_control
        git clone https://github.com/humlab-sead/sead_change_control.git
    fi

    if [ ! -d $g_sead_ccs_folder ]; then
        echo "failure: cannot add change request since default CCS project folder $g_sead_ccs_folder is missing"
        exit 64
    fi

    if [ ! -x $g_sqitch_command ] && [ ! hash $g_sqitch_command 2>/dev/null ]; then
        echo "failure: command not found: $g_sqitch_command"
        exit 64
    fi

    current_folder=`pwd`

    cd $g_sead_ccs_folder

    target_deploy_file=$g_sead_ccs_folder/${g_target_project}/deploy/${g_crid}.sql

    if [ -f $target_deploy_file ]; then
        echo "failure: ccs task ${g_crid}.sql already exists (cannot resolve conflict)"
        exit 64
    fi

    chmod +x $g_sqitch_command

    # FIXME: Use add-change-request instead!!!
    $g_sqitch_command add --change-name ${g_crid} --note "Deploy of Clearinghouse Transport System." -C ./${g_target_project}

    if [ $? -ne 0 ];  then
        echo "fatal: sqitch add command failed." >&2
        exit 64
    fi

    cd $current_folder

    cp -f $g_target_folder/${g_crid}.sql $target_deploy_file

    echo "notice: change request ${g_crid} has been added to SEAD CSS repository!"
    echo "notice: please remember to commit repository!"
}

function check_setup() {

    if [ "$g_target_folder" == "" ]; then
        g_target_folder=`get_cr_id`
        echo "notice: storing data in $g_target_folder"
    fi

    if [ "$g_target_folder" == "" ]; then
        usage "error: target folder is not set";
    fi

    local schema_opts=("abort" "drop" "update")

    if [[ ! " ${schema_opts[@]} " =~ " ${g_on_schema_exists} " ]]; then
        usage "error: unknown value for option --on-schema-exists";
    fi
}

check_setup

generate_change_request

if [ "$g_add_change_request" == "YES" ]; then

    add_change_request_to_change_control_system

fi

